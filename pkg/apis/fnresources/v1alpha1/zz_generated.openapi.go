// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/fnresources/v1alpha1.Command":                 schema_pkg_apis_fnresources_v1alpha1_Command(ref),
		"./pkg/apis/fnresources/v1alpha1.CommandSpec":             schema_pkg_apis_fnresources_v1alpha1_CommandSpec(ref),
		"./pkg/apis/fnresources/v1alpha1.CommandStatus":           schema_pkg_apis_fnresources_v1alpha1_CommandStatus(ref),
		"./pkg/apis/fnresources/v1alpha1.Database":                schema_pkg_apis_fnresources_v1alpha1_Database(ref),
		"./pkg/apis/fnresources/v1alpha1.DatabaseSpec":            schema_pkg_apis_fnresources_v1alpha1_DatabaseSpec(ref),
		"./pkg/apis/fnresources/v1alpha1.DatabaseStatus":          schema_pkg_apis_fnresources_v1alpha1_DatabaseStatus(ref),
		"./pkg/apis/fnresources/v1alpha1.DrupalApplication":       schema_pkg_apis_fnresources_v1alpha1_DrupalApplication(ref),
		"./pkg/apis/fnresources/v1alpha1.DrupalApplicationSpec":   schema_pkg_apis_fnresources_v1alpha1_DrupalApplicationSpec(ref),
		"./pkg/apis/fnresources/v1alpha1.DrupalApplicationStatus": schema_pkg_apis_fnresources_v1alpha1_DrupalApplicationStatus(ref),
		"./pkg/apis/fnresources/v1alpha1.DrupalEnvironment":       schema_pkg_apis_fnresources_v1alpha1_DrupalEnvironment(ref),
		"./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentSpec":   schema_pkg_apis_fnresources_v1alpha1_DrupalEnvironmentSpec(ref),
		"./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentStatus": schema_pkg_apis_fnresources_v1alpha1_DrupalEnvironmentStatus(ref),
		"./pkg/apis/fnresources/v1alpha1.InstallSpec":             schema_pkg_apis_fnresources_v1alpha1_InstallSpec(ref),
		"./pkg/apis/fnresources/v1alpha1.Site":                    schema_pkg_apis_fnresources_v1alpha1_Site(ref),
		"./pkg/apis/fnresources/v1alpha1.SiteSpec":                schema_pkg_apis_fnresources_v1alpha1_SiteSpec(ref),
		"./pkg/apis/fnresources/v1alpha1.SiteStatus":              schema_pkg_apis_fnresources_v1alpha1_SiteStatus(ref),
	}
}

func schema_pkg_apis_fnresources_v1alpha1_Command(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Command is the Schema for the commands API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.CommandSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.CommandStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fnresources/v1alpha1.CommandSpec", "./pkg/apis/fnresources/v1alpha1.CommandStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_CommandSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CommandSpec defines the desired state of Command",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"targetRef": {
						SchemaProps: spec.SchemaProps{
							Description: "TargetRef specifies the resource to base this Command's Job off of (replicating Pod spec, etc.)",
							Ref:         ref("./pkg/apis/fnresources/v1alpha1.TargetRef"),
						},
					},
					"command": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Command specified the shell command to run in the Command's Job, as an array of args.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"retries": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"runAsRoot": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"restartPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"schedule": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"suspend": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"concurrencyPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources specifies the resource requests and limits for the Command Job's main container, overriding the values from the TargetRef's Spec.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"activeDeadlineSeconds": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"terminationGracePeriodSeconds": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image optionally specifies an OCI image repo:tag to use in the Command Job's container, overriding the image used by the TargetRef resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"additionalLabels": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"additionalEnvVars": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"additionalVolumes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"additionalVolumeMounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
				},
				Required: []string{"targetRef", "command"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fnresources/v1alpha1.TargetRef", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Volume", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_CommandStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CommandStatus defines the observed state of Command",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"job": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/batch/v1.JobStatus"),
						},
					},
					"cronJob": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/batch/v1beta1.CronJobStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/batch/v1.JobStatus", "k8s.io/api/batch/v1beta1.CronJobStatus"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_Database(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Database is the Schema for the databases API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.DatabaseSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.DatabaseStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fnresources/v1alpha1.DatabaseSpec", "./pkg/apis/fnresources/v1alpha1.DatabaseStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_DatabaseSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatabaseSpec defines the desired state of Database",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"schemaName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"adminSecret": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"userSecret": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"host", "port", "schemaName", "user"},
			},
		},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_DatabaseStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatabaseStatus defines the observed state of Database",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_DrupalApplication(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DrupalApplication is the Schema for the drupalapplications API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.DrupalApplicationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.DrupalApplicationStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fnresources/v1alpha1.DrupalApplicationSpec", "./pkg/apis/fnresources/v1alpha1.DrupalApplicationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_DrupalApplicationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DrupalApplicationSpec defines the desired state of a Drupal Application",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"imageRepo": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitRepo": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"newRelicLicense": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_DrupalApplicationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DrupalApplicationStatus defines the observed state of a Drupal Application",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"numEnvironments": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"environments": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentRef"),
									},
								},
							},
						},
					},
				},
				Required: []string{"numEnvironments"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentRef"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_DrupalEnvironment(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DrupalEnvironment is the Schema for the drupalenvironments API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentSpec", "./pkg/apis/fnresources/v1alpha1.DrupalEnvironmentStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_DrupalEnvironmentSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DrupalEnvironmentSpec defines the desired state of DrupalEnvironment",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"application": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"production": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"efsid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitRef": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"stage": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"customEnvironmentVariables": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"drupal": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.SpecDrupal"),
						},
					},
					"apache": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.SpecApache"),
						},
					},
					"phpfpm": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.SpecPhpFpm"),
						},
					},
				},
				Required: []string{"application", "production", "efsid", "gitRef", "stage", "drupal", "apache", "phpfpm"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fnresources/v1alpha1.SpecApache", "./pkg/apis/fnresources/v1alpha1.SpecDrupal", "./pkg/apis/fnresources/v1alpha1.SpecPhpFpm", "k8s.io/api/core/v1.EnvVar"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_DrupalEnvironmentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DrupalEnvironmentStatus defines the observed state of DrupalEnvironment",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"numDrupal": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"numDrupal", "status"},
			},
		},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_InstallSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Information to install the site",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"installProfile": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"adminUsername": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"adminEmail": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"installProfile", "adminUsername", "adminEmail"},
			},
		},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_Site(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Site is the Schema for the sites API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.SiteSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.SiteStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fnresources/v1alpha1.SiteSpec", "./pkg/apis/fnresources/v1alpha1.SiteStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_SiteSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SiteSpec defines the desired state of Site",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"domains": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"environment": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"database": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"install": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fnresources/v1alpha1.InstallSpec"),
						},
					},
					"tls": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"ingressClass": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"certIssuer": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"domains", "environment", "database"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fnresources/v1alpha1.InstallSpec"},
	}
}

func schema_pkg_apis_fnresources_v1alpha1_SiteStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SiteStatus defines the observed state of Site",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"domains": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"status", "domains"},
			},
		},
	}
}
